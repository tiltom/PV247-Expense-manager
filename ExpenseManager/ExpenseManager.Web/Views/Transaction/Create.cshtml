@using ExpenseManager.Web.Controllers
@model ExpenseManager.Web.Models.Transaction.NewTransactionModel

@{
    ViewBag.Title = @Model.Expense ? "Add new expense" : "Add new income";
    HtmlHelper.ClientValidationEnabled = false;
}


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.WalletId)
        @Html.HiddenFor(model => model.Expense)
        <div class="form-group">
            @Html.LabelFor(model => model.Amount, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.EditorFor(model => model.Amount, new { htmlAttributes = new { @class = "form-control", @data_val = "false" } })
                @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CategoryId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-3">
                @Html.DropDownListFor(model => model.CategoryId, Model.Categories, "Select Category", htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-2"></div>
            <div class="col-md-10">
                <a style="text-decoration: none;" role="button" data-toggle="collapse" href="#collapseExample" aria-expanded="false" aria-controls="collapseExample">
                    Add more details <i class="glyphicon glyphicon-chevron-right"></i>
                </a>
            </div>
        </div>
        @{
            var collapse = "collapse";
            var amount = (ViewData.ModelState.ContainsKey("Amount")) ? ViewData.ModelState["Amount"].Errors.Count : 0;
            var categoryId = (ViewData.ModelState.ContainsKey("CategoryId")) ? ViewData.ModelState["CategoryId"].Errors.Count : 0;
            if (ViewData.ModelState.Values.Sum(m => m.Errors.Count) > amount + categoryId || Model.BudgetId != null || Model.Description != null ||
                (Model.Date.ToString(AbstractController.DateFormat) != DateTime.Now.ToString(AbstractController.DateFormat) && Model.Date != new DateTime()) || Model.IsRepeatable)
            {
                collapse += " in";
            }
        }
        <div class="@collapse" id="collapseExample">
            <div class="form-group">
                @Html.LabelFor(model => model.Date, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-3">
                    @(Model.Date == new DateTime() ?
                    Html.TextBoxFor(model => model.Date, new {@class = "form-control datepicker", @Value = DateTime.Now.ToString(AbstractController.DateFormat), id = "IssueDate"}) :
                    Html.TextBoxFor(model => model.Date, new { @class = "form-control datepicker", @Value = Model.Date.ToString(AbstractController.DateFormat), id = "IssueDate" }))
                    @Html.ValidationMessageFor(model => model.Date, "", new {@class = "text-danger"})
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-3">
                    @Html.TextAreaFor(model => model.Description, new { @class = "form-control noresize", @rows = 5 })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CurrencyId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-3">
                    @Html.DropDownListFor(model => model.CurrencyId, Model.Currencies, "Select Currency", htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.CurrencyId, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group">
                @Html.LabelFor(model => model.BudgetId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-3">
                    @Html.DropDownListFor(model => model.BudgetId, Model.Budgets, "Select Budget", htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.BudgetId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.IsRepeatable, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-3" style="margin-top: 7px">
                    @Html.CheckBoxFor(model => model.IsRepeatable, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.IsRepeatable, "", new { @class = "text-danger" })
                </div>
            </div>



            @{
                var repeat = "";
                if (!@Html.ViewData.Model.IsRepeatable)
                {
                    repeat = "hidden";
                }
            }
            <div class="repeatableTransaction" @repeat>
                <div class="form-group">
                    @Html.LabelFor(model => model.NextRepeat, htmlAttributes: new { @class = "control-label col-md-2 col-xs-12" })
                    
                        <div class="col-md-1 col-xs-4">
                            @Html.EditorFor(model => model.NextRepeat, new { htmlAttributes = new { @class = "form-control", @Value = Model.NextRepeat ?? 1 } })
                            @Html.ValidationMessageFor(model => model.NextRepeat, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-md-2 col-xs-7">
                            @Html.EnumDropDownListFor(model => model.FrequencyType, "Select Frequency", htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.FrequencyType, "", new { @class = "text-danger" })
                        </div>
                    
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.LastOccurrence, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-3">
                        @(Model.LastOccurrence == null ?
                        Html.TextBoxFor(model => model.LastOccurrence, new { @class = "form-control datepicker", placeholder = DateTime.Now.AddDays(1).ToString(AbstractController.DateFormat) }) :
                        Html.TextBoxFor(model => model.LastOccurrence, new { @class = "form-control datepicker", @Value = Model.LastOccurrence.GetValueOrDefault().ToString(AbstractController.DateFormat) }))
                        @Html.ValidationMessageFor(model => model.LastOccurrence, "", new {@class = "text-danger"})
                    </div>
                </div>
            </div>

        </div>


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-success" />
                @Html.ActionLink("Cancel", "Index", new { wallet = Model.WalletId }, new { @class = "btn btn-danger" })
            </div>
        </div>
    </div>
}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("/Scripts/transactionCheckbox.js")
}